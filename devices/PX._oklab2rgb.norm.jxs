<jittershader name="oklab_to_linear_srgb">
    <description>Convert OKLab (stored as L, a+0.5, b+0.5) back to linear sRGB</description>
    <param name="tex0" type="int" default="0"/>
    <language name="glsl" version="1.0">
        <bind param="tex0" program="fp"/>
        <program name="vp" type="vertex">
            <![CDATA[
varying vec2 texcoord0;

void main() {
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}
]]>
        </program>
        <program name="fp" type="fragment">
            <![CDATA[
varying vec2 texcoord0;
uniform sampler2DRect tex0;

vec3 linear_to_srgb(vec3 c) {
    return mix(12.92 * c,1.055 * pow(c, vec3(1.0/2.4)) - 0.055,step(0.0031308, c));
}

vec3 oklab_to_linear_srgb(vec3 c) {
    float l_ = c.r + 0.3963377774 * c.g + 0.2158037573 * c.b;
    float m_ = c.r - 0.1055613458 * c.g - 0.0638541728 * c.b;
    float s_ = c.r - 0.0894841775 * c.g - 1.2914855480 * c.b;

    float l = l_*l_*l_;
    float m = m_*m_*m_;
    float s = s_*s_*s_;
    
    vec3 rgb = vec3(
		4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s,
		-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s,
		-0.0041960863 * l - 0.7034186147 * m + 1.7076147010 * s
    );
    
    return rgb;
}

vec3 denormalizeRange(vec3 value) {
    vec3 minVal = vec3(0., -1.838,  -0.450);
    vec3 maxVal = vec3(1.004, 1.253, 0.264);
    return value * (maxVal - minVal) + minVal;
}

vec4 oklab_to_linear_srgb(vec4 encoded) {
    vec3 rgb = linear_to_srgb(oklab_to_linear_srgb(denormalizeRange(encoded.rgb)));

    return vec4(rgb, encoded.a);
}

void main() {
    vec4 encoded = texture2DRect(tex0, texcoord0);
    gl_FragColor = oklab_to_linear_srgb(encoded);
}
]]>
        </program>
    </language>
</jittershader>
