<jittershader name="circle">
  <description>Circle</description>
  <param name="tex0" type="int" default="0"/>
  <param name="tex1" type="int" default="1"/>
  <param name="progress" type="float" default="0.5"/>
  <param name="center" type="vec2" default="0.5 0.5"/>
  <param name="backColor" type="vec3" default="0.1 0.1 0.1"/>
  <language name="glsl" version="1.0">
    <bind param="tex0" program="fp"/>
    <bind param="tex1" program="fp"/>
    <bind param="progress" program="fp"/>
    <bind param="center" program="fp"/>
    <bind param="backColor" program="fp"/>
    <program name="vp" type="vertex">
            <![CDATA[
varying vec2 texcoord0;
varying vec2 texdim0;

varying vec2 texcoord1;
varying vec2 texdim1;

void main() {
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
// Adapted from https://github.com/gl-transitions/gl-transitions
//precision highp float;
varying vec2 texcoord0;
varying vec2 texdim0, texdim1;
uniform sampler2DRect tex0, tex1;
uniform float progress;

float ratio = texdim0.x / texdim0.y;

vec4 getFromColor(vec2 uv){return texture2DRect(tex0, uv*texdim0);}

vec4 getToColor(vec2 uv){return texture2DRect(tex1, uv*texdim1);}

// Author: Fernando Kuteken
// License: MIT

uniform vec2 center; // = vec2(0.5, 0.5);
uniform vec3 backColor; // = vec3(0.1, 0.1, 0.1);

vec4 transition (vec2 uv) {
  
  float distance = length(uv - center);
  float radius = sqrt(8.0) * abs(progress - 0.5);
  
  if (distance > radius) {
    return vec4(backColor, 1.0);
  }
  else {
    if (progress < 0.5) return getFromColor(uv);
    else return getToColor(uv);
  }
}


void main(){gl_FragColor=transition(texcoord0/texdim0);}
]]>
    </program>
  </language>
</jittershader>
