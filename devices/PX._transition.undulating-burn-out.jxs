<jittershader name="undulating-burn-out">
  <description>Undulating burn out</description>
  <param name="tex0" type="int" default="0"/>
  <param name="tex1" type="int" default="1"/>
  <param name="progress" type="float" default="0.5"/>
  <param name="smoothness" type="float" default="0.03"/>
  <param name="center" type="vec2" default="0.5 0.5"/>
  <param name="color" type="vec3" default="0 0 0"/>
  <language name="glsl" version="1.0">
    <bind param="tex0" program="fp"/>
    <bind param="tex1" program="fp"/>
    <bind param="progress" program="fp"/>
    <bind param="smoothness" program="fp"/>
    <bind param="center" program="fp"/>
    <bind param="color" program="fp"/>
    <program name="vp" type="vertex">
            <![CDATA[
varying vec2 texcoord0;
varying vec2 texdim0;

varying vec2 texcoord1;
varying vec2 texdim1;

void main() {
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
//precision highp float;
varying vec2 texcoord0;
varying vec2 texdim0, texdim1;
uniform sampler2DRect tex0, tex1;
uniform float progress;

float ratio = texdim0.x / texdim0.y;

vec4 getFromColor(vec2 uv){return texture2DRect(tex0, uv*texdim0);}

vec4 getToColor(vec2 uv){return texture2DRect(tex1, uv*texdim1);}

// License: MIT
// Author: pthrasher
// adapted by gre from https://gist.github.com/pthrasher/8e6226b215548ba12734

uniform float smoothness; // = 0.03
uniform vec2 center; // = vec2(0.5)
uniform vec3 color; // = vec3(0.0)

const float M_PI = 3.14159265358979323846;

float quadraticInOut(float t) {
  float p = 2.0 * t * t;
  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
}

float getGradient(float r, float dist) {
  float d = r - dist;
  return mix(
    smoothstep(-smoothness, 0.0, r - dist * (1.0 + smoothness)),
    -1.0 - step(0.005, d),
    step(-0.005, d) * step(d, 0.01)
  );
}

float getWave(vec2 p){
  vec2 _p = p - center; // offset from center
  float rads = atan(_p.y, _p.x);
  float degs = degrees(rads) + 180.0;
  vec2 range = vec2(0.0, M_PI * 30.0);
  vec2 domain = vec2(0.0, 360.0);
  float ratio = (M_PI * 30.0) / 360.0;
  degs = degs * ratio;
  float x = progress;
  float magnitude = mix(0.02, 0.09, smoothstep(0.0, 1.0, x));
  float offset = mix(40.0, 30.0, smoothstep(0.0, 1.0, x));
  float ease_degs = quadraticInOut(sin(degs));
  float deg_wave_pos = (ease_degs * magnitude) * sin(x * offset);
  return x + deg_wave_pos;
}

vec4 transition(vec2 p) {
  float dist = distance(center, p);
  float m = getGradient(getWave(p), dist);
  vec4 cfrom = getFromColor(p);
  vec4 cto = getToColor(p);
  return mix(mix(cfrom, cto, m), mix(cfrom, vec4(color, 1.0), 0.75), step(m, -2.0));
}


void main(){gl_FragColor=transition(texcoord0/texdim0);}
]]>
    </program>
  </language>
</jittershader>
