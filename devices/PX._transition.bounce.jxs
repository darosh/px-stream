<jittershader name="bounce">
  <description>Bounce</description>
  <param name="tex0" type="int" default="0"/>
  <param name="tex1" type="int" default="1"/>
  <param name="progress" type="float" default="0.5"/>
  <param name="shadow_colour" type="vec4" default="0 0 0 0.6"/>
  <param name="shadow_height" type="float" default="0.075"/>
  <param name="bounces" type="float" default="3"/>
  <language name="glsl" version="1.0">
    <bind param="tex0" program="fp"/>
    <bind param="tex1" program="fp"/>
    <bind param="progress" program="fp"/>
    <bind param="shadow_colour" program="fp"/>
    <bind param="shadow_height" program="fp"/>
    <bind param="bounces" program="fp"/>
    <program name="vp" type="vertex">
            <![CDATA[
varying vec2 texcoord0;
varying vec2 texdim0;

varying vec2 texcoord1;
varying vec2 texdim1;

void main() {
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
//precision highp float;
varying vec2 texcoord0;
varying vec2 texdim0, texdim1;
uniform sampler2DRect tex0, tex1;
uniform float progress;

float ratio = texdim0.x / texdim0.y;

vec4 getFromColor(vec2 uv){return texture2DRect(tex0, uv*texdim0);}

vec4 getToColor(vec2 uv){return texture2DRect(tex1, uv*texdim1);}

// Author: Adrian Purser
// License: MIT

uniform vec4 shadow_colour; // = vec4(0.,0.,0.,.6)
uniform float shadow_height; // = 0.075
uniform float bounces; // = 3.0

const float PI = 3.14159265358;

vec4 transition (vec2 uv) {
  float time = progress;
  float stime = sin(time * PI / 2.);
  float phase = time * PI * bounces;
  float y = (abs(cos(phase))) * (1.0 - stime);
  float d = uv.y - y;
  return mix(
    mix(
      getToColor(uv),
      shadow_colour,
      step(d, shadow_height) * (1. - mix(
        ((d / shadow_height) * shadow_colour.a) + (1.0 - shadow_colour.a),
        1.0,
        smoothstep(0.95, 1., progress) // fade-out the shadow at the end
      ))
    ),
    getFromColor(vec2(uv.x, uv.y + (1.0 - y))),
    step(d, 0.0)
  );
}


void main(){gl_FragColor=transition(texcoord0/texdim0);}
]]>
    </program>
  </language>
</jittershader>
